KIT_RAW_SDL_EVENTS = 1 ;

SubDir TOP ;
SubInclude TOP kit ;
#SubInclude TOP libgeodesic src ;

MySubDir TOP ;

if $(OS) = LINUX {
	C++ += -pg ;
	LINK += -pg ;
}


#---- build ----

PLAN_TRANSFERS_NAMES =
	plan_transfers
	plan_transfers-draw_beds
	plan_transfers-run_transfers
	plan_transfers-best_collapse
	plan_transfers-best_shift
	plan_transfers-best_expand
	plan_transfers-minimize_winding
	;

NAMES =
	Stitch
	ScheduleCost
	schedule
	embed_DAG
	#embed_DAG-multipass
	$(PLAN_TRANSFERS_NAMES)
	;

AUTOKNIT_NAMES =
	ak-trace_graph
	ak-peel_slice-euclidean
	ak-trim_model
	ak-embedded_path
	ak-build_next_active_chains
	ak-link_chains
	ak-extract_level_chains
	ak-find_first_active_chains
	ak-sample_chain
	Interface
	init
	load_obj
	ak-load_constraints
	ak-embed_constraints
	ak-interpolate_values
	;

#if $(OS) = NT {
#	NAMES += gl_shims ;
#}

if $(OS) = MACOSX {
	ObjectC++Flags ak-interpolate_values.o : -I/usr/local/include/eigen3 ;
} else if $(OS) = NT {
	ObjectC++Flags ak-interpolate_values.o : /Ieigen ;
} else {
	ObjectC++Flags ak-interpolate_values.o : -I/usr/include/eigen3 ;
}

#ObjectC++Flags ak-peel_chains-libgeodesic.o : -Ilibgeodesic/include -I/usr/include/suitesparse ;

LOCATE_TARGET = objs ; #put objects in 'objs' directory
Objects $(NAMES:S=.cpp) test_plan_transfers.cpp test_flatten.cpp test_shape.cpp ;

LOCATE_TARGET = dist ; #put main in 'dist' directory
MainFromObjects schedule : $(NAMES:S=$(SUFOBJ)) ;

MainFromObjects test_shape : test_shape$(SUFOBJ) ;

MainFromObjects test_plan_transfers : test_plan_transfers$(SUFOBJ) $(PLAN_TRANSFERS_NAMES:S=$(SUFOBJ)) ;
MyMainFromObjects test_flatten : test_flatten$(SUFOBJ) ak-link_chains$(SUFOBJ) ;

LINKLIBS on interface = $(LINKLIBS) ;
LINKLIBS on interface += $(LIBGEODESIC_LIBS) ;

MyObjects $(AUTOKNIT_NAMES:S=.cpp) ;
MyMainFromObjects interface : $(AUTOKNIT_NAMES:S=$(SUFOBJ)) $(KIT_OBJECTS) Stitch$(SUFOBJ) ;

